- title 'Matches'[]

- if @matches.length > 0
  - if @filter
    #filter
      - if @filter.length > 1
        = 'Filter by <b>{first}</b> and <b>{second}</b>'[:filter_by_two, h(@filter[0].display_name), h(@filter[1].display_name)]
      - else
        = 'Filter by <b>{first}</b>'[:filter_by_one, h(@filter[0].display_name)]

      = link_to 'Clear filter', matches_path, :class => 'clear'

  #matches
    .list
      %table
        %tr
          %th= 'Team one'[]
          %th.score= 'Score'[]
          %th= 'Team two'[]
          %th &nbsp;
          %th= 'Created'[]
          %th &nbsp;

        - @matches.each do |match|
          %tr{ :class => cycle('odd', 'even') }
            = render :partial => 'match_columns', :locals => { :match => match }

            %td
              = match.played_at.to_s :short
              = ' by {user}'[:by_user, find_user(match.creator_id).login] unless match.creator_id.nil?

            %td= link_to 'Delete', match_path(match), :method => :delete, :confirm => 'Delete match. Are you sure?'[] if logged_in?

  .pagination= will_paginate @matches

  .bottom_space
    = link_to 'RSS feed (all matches)'[] + ' ' + image_tag('rss.gif'), formatted_matches_url(:rss), :class => 'rss'
    - unless params[:filter].blank?
      = link_to 'RSS feed (filtered)'[] + ' ' + image_tag('rss.gif'), formatted_matches_url(:rss, :filter => params[:filter]), :class => 'rss'

- content_for :head do
  = auto_discovery_link_tag :atom, formatted_matches_url(:atom), :title => 'All matches'[]
  = auto_discovery_link_tag :rss, formatted_matches_url(:rss), :title => 'All matches'[]

  - unless params[:filter].blank?
    = auto_discovery_link_tag :atom, formatted_matches_url(:atom, :filter => params[:filter]), :title => 'Filtered'[]
    = auto_discovery_link_tag :rss, formatted_matches_url(:rss, :filter => params[:filter]), :title => 'Filtered'[]